swagger: '2.0'
info:
  description: ''
  version: 1.0.0 Snapshot
  title: CS API
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: api.dng.cs
basePath: /v2
tags:
  - name: Client
    description: Client operation
  - name: Contract
    description: Contract Info
  - name: Address
    description: Address Info
  - name: Auth
    description: Authentication endpoint
schemes:
  - https
  - http

paths:
  /client/{clientId}/uploadImage:
    post:
      tags:
        - Client
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: clientId
          in: path
          description: ID of pet to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - client_auth:
            - write:clients
            - read:clients
  /client:
    post:
      tags:
        - Client
      summary: Add a new client to the store
      description: ''
      operationId: addClient
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Client Object to create
          required: true
          schema:
            $ref: '#/definitions/Client'
      responses:
        '405':
          description: Invalid input
      security:
        - client_auth:
            - write:client
            - read:client
    put:
      tags:
        - Client
      summary: Update an existing client
      description: ''
      operationId: updateClient
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: CLient object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Client'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Client not found
        '405':
          description: Validation exception
      security:
        - client_auth:
            - write:clients
            - read:clients

  /client/findByCategory:
    get:
      tags:
        - Client
      summary: Finds Clients by status
      description: Find client by status
      operationId: findClientsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - name: category
          in: query
          description: Category for filtering
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
        '400':
          description: Invalid status value
      security:
        - client_auth:
            - write:clients
            - read:clients

  /client/{clientId}:
    get:
      tags:
        - Client
      summary: Find client by ID
      description: Returns a single client
      operationId: getClientById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: clientId
          in: path
          description: ID of client to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Client'
        '400':
          description: Invalid ID supplied
        '404':
          description: Client not found
      security:
        - api_key: []

    delete:
      tags:
        - Client
      summary: Deletes a client
      description: ''
      operationId: deleteClient
      produces:
        - application/json
        - application/xml
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: clientId
          in: path
          description: Client id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Client Delete
        '400':
          description: Invalid ID supplied
        '404':
          description: Client not found
      security:
        - client_auth:
            - write:clients
            - read:clients

  /contract:
    post:
      tags:
        - Contract
      summary: Create new Contract
      description: ''
      operationId: placeCotract
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: contract body
          required: true
          schema:
            $ref: '#/definitions/Contract'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Contract'
        '400':
          description: Invalid Contract

  /contract/{contractId}:
    get:
      tags:
        - Contract
      summary: Find contract by ID
      description: Find Contract
      operationId: getContractById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: contractId
          in: path
          description: ID of contract that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Contract'
        '400':
          description: Invalid Contract
        '404':
          description: Contract not found

    delete:
      tags:
        - Contract
      summary: Delete contract by ID
      description: Delete contract by Id
      operationId: deleteContract
      produces:
        - application/json
        - application/xml
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: contractId
          in: path
          description: ID of the contract that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Contract ID Invalid
        '404':
          description: Contract not found

  /contracts:
    get:
      tags:
        - Contract
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getContract
      produces:
        - application/json
      parameters:
        - in: query
          name: product
          type: string
          description: product criteria
      responses:
        '200':
          description: successful operation
      security:
        - api_key: []

  /address/createWithArray:
    post:
      tags:
        - Address
      summary: Creates list of address for client
      description: ''
      operationId: createAddressWithArrayInput
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of address object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
      responses:
        default:
          description: successful operation

  /address/{clientId}:
    get:
      tags:
        - Address
      summary: Get address by clientId
      description: ''
      operationId: getAddressById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: clientId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /address/{clientId}/{addressId}:
    get:
      tags:
        - Address
      summary: Get address by clientId
      description: ''
      operationId: getAddressById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: clientId
          in: path
          description: 'Client ID'
          required: true
          type: string
        - name: addressId
          in: path
          description: 'Address ID'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Address'
        '400':
          description: Invalid client supplied
        '404':
          description: User not found

    put:
      tags:
        - Address
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - name: clientId
          in: path
          description: 'Client ID'
          required: true
          type: string
        - name: addressId
          in: path
          description: 'Address ID'
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/Address'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found

    delete:
      tags:
        - Address
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /auth/login:
    get:
      tags:
        - Auth
      summary: Logs client into the system
      description: ''
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
          schema:
            type: string
        '400':
          description: Invalid username/password supplied

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      parameters: []
      responses:
        default:
          description: successful operation

  /auth/signin:
    post:
      tags:
        - Auth
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation

securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header

  client_auth:
    type: oauth2
    authorizationUrl: https://petstore.swagger.io/oauth/authorize
    flow: implicit
    scopes:
      read:clients: read your client
      write:clients: modify clients in your account

definitions:
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string

  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category

  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          wrapped: true
        items:
          type: string
          xml:
            name: photoUrl
      tags:
        type: array
        xml:
          wrapped: true
        items:
          xml:
            name: tag
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet

  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag

  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
    xml:
      name: Order

  Client:
    type: object
    properties:
      state:
        type: string
      dateCreated:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      branch:
        type: string
      clientCat:
        type: string
        enum:
          - PRIVATE
          - COMMERCIAL
      productCat:
        type: string
        enum:
          - ISS
          - ACQ
      clientName:
        type: string
      birthDate:
        type: string
        format: date-time
      gender:
        type: string
      clientNumber:
        type: string
      regNumber:
        type: string
      addressLine:
        type: string
      phone:
        type: string
      fax:
        type: string
      email:
        type: string
      addInfo:
        type: string
      addDate:
        type: string
        format: date-time
      isReady:
        type: string
    xml:
      name: Client

  Contract:
    type: object
    properties:
      state:
        type: string
      id:
        type: integer
        format: int64
      productCat:
        type: string
        enum:
          - ISS
          - ACQ
      contractCat:
        type: string
        enum:
          - CARD
          - DEVICE
      contractNumber:
        type: string
      commentText:
        type: string
      mainProduct:
        type: string
      clientId:
        type: integer
        format: int64
      currency:
        type: string
      amountAvailable:
        type: integer
        format: int64
      dateOpen:
        type: string
        format: date-time
      dateExpire:
        type: string
        format: date-time
      cardExpire:
        type: string
        format: date-time
      contractStatus:
        type: string
        enum:
          - Card OK
          - Card Closed
          - Card Expired
      addInfo:
        type: string
      isReady:
        type: string
        enum:
          - Ready
          - Not ready
    xml:
      name: Contract

  Address:
    type: object
    properties:
      state:
        type: string
      dateCreated:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      clientId:
        type: integer
        format: int64
      addressType:
        type: string
      addressLine:
        type: string
      zipcode:
        type: string
      phone:
        type: string
      email:
        type: string
      url:
        type: string
      deliveryType:
        type: string
        enum:
          - COD
          - GRAB
      isReady:
        type: string
        enum:
          - Ready
          - Not ready
    xml:
      name: Address


  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
